#!/usr/bin/env ruby
require 'bundler/setup'

require 'terminal-table'
require 'thor'

require_relative 'engine.rb'
 
class CLI < Thor
  desc "list", "list names of all challenges"
  def list
    puts list_challenges
  end

  desc "describe CHALLENGE", "Print of details for CHALLENGE"
  def describe(challenge)
    target = File.read("#{challenge_path(challenge)}/target.txt")
    puts "Target:"
    puts target
    print_leaderboard(challenge)
  end

  desc "create CHALLENGE", "Make a new challenge"
  def create(challenge)
    if File.directory?("challenges/#{challenge}")
      puts "A challenge with that name already exists."
      return
    end
    FileUtils.mkdir(challenge_path(challenge))
    target_path = "#{challenge_path(challenge)}/target.txt"
    FileUtils.cp('fixtures/sample.txt', target_path)
    puts "Fill in #{target_path}"
  end

  desc "attempt_all", "Run all programs and record results"
  def attempt_all
    list_challenges.each do |challenge|
      list_programs(challenge).each do |program|
        attempt(challenge, program)
      end
    end
  end

  desc "attempt CHALLENGE PROGRAM", "Run PROGRAM on CHALLENGE and measure record results"
  def attempt(challenge, program)
    unless list_challenges.include?(challenge)
      raise "no exiting challenge named #{challenge}"
    end

    FileUtils.mkdir_p("#{challenge_path(challenge)}/#{program}")
    FileUtils.touch(program_path(challenge, program))
    program_bytes = File.read(program_path(challenge, program))
    if program_bytes.strip.length == 0
      puts "Write your program in #{program_path(challenge, program)}"
      return
    end

    commands = commands_from_file(program_path(challenge, program))
    target = target_from_file("#{challenge_path(challenge)}/target.txt")

    log_path = "#{challenge_path(challenge)}/#{program}/log.txt"
    long_log_path = "#{challenge_path(challenge)}/#{program}/long_log.txt"
    simulation = nil
    differences = nil
    stable = nil
    cycles = nil
    File.open(log_path, 'w') do |log|
      File.open(long_log_path, 'w') do |long_log|
        simulation, differences, stable, cycles = simulate(commands, target, log, long_log)
      end
    end

    if differences == 0
      puts "SUCCESS! (in #{cycles} cycles)"
    else
      puts "Result does not match (after #{cycles} cycles)"
      puts "#{differences} differences."
    end

    if !stable
      puts "WARNING: Result is not stable"
    end

    update_leaderboard(challenge, program, differences, stable, cycles)

    puts "target:"
    print_target(target)
    puts "actual:"
    print_grid(simulation.grid, $stdout)
    puts "Logs in:\n#{log_path}\n#{long_log_path}\n"
    print_leaderboard(challenge, program)
  end

  desc "stats", "show challenges ordered by length of solution"
  def stats
    rows = list_challenges.map do |challenge|
      leaderboard = parse_leaderboard(challenge)
      next if leaderboard.length == 0
      sorted = leaderboard.entries.select do |program, program_stats|
        program_stats[:differences] == 0 && program_stats[:stable]
      end.sort_by do |program, program_stats|
        program_stats[:commands]
      end
      program, program_stats = sorted.first
      path = program_path(challenge, program)
      {
        challenge: challenge,
        program: path,
        commands: commands_from_file(path).commands.length,
        cycles: program_stats[:cycles],
      }
    end.compact.sort_by do |row|
      row[:commands]
    end

    table = Terminal::Table.new(
      headings: ["Program", "Challenge", "# Commands", "# Cycles"],
      rows: rows.map do |row|
        [row[:program], row[:challenge], row[:commands], row[:cycles]]
      end,
    )
    puts "Challenges ordered by length of best solution"
    puts table
  end
end
 
CLI.start(ARGV)